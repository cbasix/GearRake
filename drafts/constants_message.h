//
// Created by cyberxix on 16.02.16.
//

#ifndef GEARRAKE_CONSTANTS_MESSAGE_H
#define GEARRAKE_CONSTANTS_MESSAGE_H

#include "constants.h"
#ifdef TESTING
    #include <string>
#endif
enum class SerialConf : int{
    BUF_SIZE = 200,

};
namespace SerialChar {
    enum SerialChar : char {
        ESCAPE = 0x1b,
        START = 0x02,
        END = 0x03,
    };
}


enum class MessageType : int{
    NONE,
    TIMEOUT_REQUEST, /* Request an timeout signal after the specified amount of time */
    TIMER_REQUEST, /* Request an timer_state signal after the specified amount of time */
    CYLINDER_REQUEST, /* (LOWLEVEL only to be used by the move action) Request an change of the output signal to move a cylinder */
    LED_REQUEST, /* Request an change of the output signal to set an led on/off */
    MOVE_TIME_REQUEST, /* Request the movement of a cylinder for a specified time in a given direction */
    MOVE_POSITION_REQUEST, /* Request the movement of a cylinder to a given position */
    MOVE_DIRECTION_REQUEST, /* Request the movement of a cylinder in the given direction, continues until a stop signal is send*/
    ACTION_STATE, /* Used for communication between action. Can be used to stop subtasks, or signal the termination of a subtask to the parent task */
    TIMEOUT, /* Occurs when a given position could not be reached in the amount of time specified in the settings. Actions must request it first*/
    TIMER_STATE, /* Occurs when a action requested it, and the given amount of time is over. */
    POSITION_STATE, /* Anser to the position_request contains the position of the cylinder */
    POSITION_REQUEST, /* Requests an position_state */
    POSITION_CHANGE, /* Occurs when a cylinder changes its state. Is generated by the Position Action */
    MANUAL_INPUT_CHANGE, /* Occurs, when the user presses a button */
    SENSOR_INPUT_CHANGE, /* Occurs, when a sensor changes its state, these are used to generate the position_change messages */

    //diag messages
    DIAG_SETTING_REQUEST, /* Requests an diag_setting_state message, to get the current setting and its value */
    DIAG_SETTING_STATE, /* Answer to the diag_setting_request */
    DIAG_SETTING_UPDATE, /* Request the update of the given setting */

    DIAG_ACTIVE_UPDATE_REQUEST, /* Request to be kept up to date with active_status messages, whenever a action is started or stopped */
    DIAG_ACTIVE_STATUS, /* Answer to the diag_active_update request. */

    DIAG_INPUT_UPDATE_REQUEST, /* Request to get all sensor_input_change and manual_input_change messages */

    DIAG_FAILURE_STORAGE_REQUEST, /* Request to be kept up to date with failure_storage_entry messages, whenever a a failure occours, or initally for all messages in the failure storage */
    DIAG_FAILURE_STORAGE_ENTRY, /* Answer to the diag_failure_storage_request */

    DIAG_LOG_REQUEST, /* Request to get all internal Messages */


    ENUM_COUNT
};

#ifdef TESTING
const std::string MessageTypeStr[] = {
        "NONE",
        "TIMEOUT_REQUEST",
        "TIMER_REQUEST",
        "CYLINDER_REQUEST",
        "MOVE_TIME_REQUEST",
        "MOVE_POSITION_REQUEST",
        "MOVE_DIRECTION_REQUEST",
        "ACTION_STATE",
        "TIMEOUT",
        "TIMER_STATE",
        "POSITION_STATE",
        "MANUAL_INPUT_CHANGE",
        "POSITION_CHANGED",
        "POSITION_REQUEST",
        "POSITION_CHANGE",
        "SENSOR_INPUT_CHANGE"

};
#endif //testing

enum class MessageField : int {
    //msgCylinder
    TIMEOUT__STATE = 0,

    TIMEOUT_REQUEST__TIMEOUT = 0,

    TIMER_REQUEST__TIMING = 0,

    CYLINDER_REQUEST__CYLINDER = 0,
    CYLINDER_REQUEST__DIRECTION = 1,

    LED_REQUEST__ID = 0,
    LED_REQUEST__STATE = 1,

    MOVE_TIME_REQUEST__CYLINDER = 0,
    MOVE_TIME_REQUEST__DIRECTION = 1,
    MOVE_TIME_REQUEST__TIMING = 2,

    MOVE_POSITION_REQUEST__CYLINDER = 0,
    MOVE_POSITION_REQUEST__POSITION = 1,

    MOVE_DIRECTION_REQUEST__CYLINDER = 0,
    MOVE_DIRECTION_REQUEST__DIRECTION = 1,

    ACTION_STATE__STATE = 0,

    POSITION_STATE__CYLINDER = 0,
    POSITION_STATE__POSITION = 1,

    MANUAL_INPUT_CHANGE__ID = 0,
    MANUAL_INPUT_CHANGE__VALUE = 1,

    POSITION_REQUEST__CYLINDER = 0,

    POSITION_CHANGE__CYLINDER = 0,
    POSITION_CHANGE__POSITION = 1,


    SENSOR_INPUT_CHANGE__ID = 0,
    SENSOR_INPUT_CHANGE__VALUE = 1,

    DIAG_SETTING_STATE__TYPE = 0,
    DIAG_SETTING_STATE__ID = 1,
    DIAG_SETTING_STATE__VALUE = 2,

    SETTING_UPDATE__TYPE = 0,
    SETTING_UPDATE__ID = 1,
    SETTING_UPDATE__VALUE = 2,

    SETTING_REQUEST__TYPE = 0,
    SETTING_REQUEST__ID = 1,

    ACTIVE_UPDATE_REQUEST__ACTIVE = 0,

    STATUS_UPDATE_REQUEST__ACTIVE = 0,

    FAILURE_STORAGE_REQUEST__ACTIVE = 0,

    LOG_REQUEST__ACTIVE = 0,

    ACTIVE_STATUS__TYPE = 0,
    ACTIVE_STATUS__CLASS = 1,
    ACTIVE_STATUS__ACTIVE = 2,

    ENUM_COUNT = 3
};

enum class ActionState : int {
    STARTING,
    STARTED,
    STOPPING,
    STOPPED_OK,
    STOPPED_ERROR
};


#endif //GEARRAKE_CONSTANTS_MESSAGE_H
